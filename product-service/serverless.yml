service: product-service

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

<<<<<<< HEAD
  environment:
    ENV_STAGE: ${opt:stage, 'dev'}
    PGPORT: 5432
    SQS_URL: 
      Ref: SQSQueue
    SNS_ARN: 
      Ref: SNSTopic
=======
>>>>>>> ae6eea4eec9323356e3750d209cc2e347c0234f3

  iamRoleStatements:
    - Effect: "Allow"
      Action: "sqs:*"
      Resource:
        - Fn::GetAtt: [ SQSQueue, Arn ]
    - Effect: "Allow"
      Action: "sns:*"
      Resource:
        Ref: SNSTopic

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-openapi-documentation

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ponkratova@tut.by
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        # FilterPolicy: 
        #   title:
        #     - String:
        #       - "interest"

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
  documentation:
    version: '1'
    title: 'Emotions shop backend'
    description: 'Emotions shop backend documentation'
    models: 
      - name: GetProductRequest
        description: GET Product by Id request model (http://localhost:3000/dev/products/{productId})
        contentType: application/json
        schema:
          $schema: http://json-schema.org/draft-04/schema#
          properties:
            SomeObject:
              type: object
              properties:
                SomeAttribute:
                  type: string
      - name: GetAllProductsRequest
        description: GET All Products request model (http://localhost:3000/dev/products)
        contentType: application/json
        schema:
          $schema: http://json-schema.org/draft-04/schema#
          properties:
            SomeObject:
              type: object
              properties:
                SomeAttribute:
                  type: string

functions:
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                productId: true
          documentation:
            summary: "Get product by Id from the products list"
            description: "Get product by Id from the products list"
            requestBody:
              description: "A product information object"
            requestModels:
              application/json: "GetProductRequest"
            pathParams:
              - name: "productId"
                description: "Id of the product"
                schema:
                  type: "string"
                  pattern: "^[-a-z0-9_]+$"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "A product along with passed id"
                responseModels:
                  application/json: "GetDocumentResponse"
              - statusCode: 500
                responseBody:
                  description: "An error message 'Product not found'"
                responseModels:
                  application/json: "ErrorResponse"

  getAllProducts:
    handler: handler.getAllProducts
    events:
      - http:
          path: products
          method: get
          cors: true
  
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true

  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn: 
            Fn::GetAtt:
              - SQSQueue
              - Arn
